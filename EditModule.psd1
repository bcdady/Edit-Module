#
# Module manifest for module 'EditModule'
#
# Generated by: Bryan Dady
#
# Generated on: 4/12/2015
#
# Updated on: 12/12/2016 : Support editing a module at a path that contains spaces
# Updated on: 7/3/2017   : Add Edit-Path and Open-PSEdit scripts (and their functions) to support using VS Code or another alternative editor. Renamed Fornmat-String function to Format-Path
#

@{

# Script module or binary module file associated with this manifest.
RootModule = 'EditModule.psm1'

# Version number of this module.
ModuleVersion = '2.2.0'

# ID used to uniquely identify this module
GUID = '4c59e659-24f7-4370-88ac-1dbdcfdc2e63'

# Author of this module
Author = 'Bryan Dady'

# Company or vendor of this module
# CompanyName = 'Undefined'

# Copyright statement for this module
Copyright = '(c) 2015 Bryan Dady. All rights reserved.'

# Description of the functionality provided by this module
Description = 'This started as a copy of Scripting Guy Ed Wilson''s Edit-Module function, from his PowerShellISEModule, and was updated to accomodate additional module file editing, such as those module elements added in more recent releases of PowerShell'

# Minimum version of the Windows PowerShell engine required by this module
PowerShellVersion = '3.0'

# Name of the Windows PowerShell host required by this module
# PowerShellHostName = ''

# Minimum version of the Windows PowerShell host required by this module
# PowerShellHostVersion = ''

# Minimum version of Microsoft .NET Framework required by this module
# DotNetFrameworkVersion = ''

# Minimum version of the common language runtime (CLR) required by this module
# CLRVersion = ''

# Processor architecture (None, X86, Amd64) required by this module
# ProcessorArchitecture = ''

# Modules that must be imported into the global environment prior to importing this module
# RequiredModules = @()

# Assemblies that must be loaded prior to importing this module
# RequiredAssemblies = @()

# Script files (.ps1) that are run in the caller's environment prior to importing this module.
ScriptsToProcess = @('Edit-Path.ps1', 'ModuleMembers.ps1', 'Open-PSEdit.ps1', 'Repair-ModuleManifest.ps1')

# Type files (.ps1xml) to be loaded when importing this module
# TypesToProcess = @()

# Format files (.ps1xml) to be loaded when importing this module
# FormatsToProcess = @()

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
# NestedModules = @()

# Functions to export from this module
FunctionsToExport = @('Assert-PSEdit', 'Edit-Module', 'Format-Path', 'Find-Function', 'Get-ModuleMember', 'Get-PSEdit', 'Add-Path', 'Get-PathFromRegistry', 'Remove-Path', 'Set-Path', 'Test-LocalAdmin', 'Open-AdminISE', 'Open-PSEdit', 'Repair-ModuleManifest')

# Cmdlets to export from this module
# CmdletsToExport = @()

# Variables to export from this module
# VariablesToExport = @()

# Aliases to export from this module
AliasesToExport = @('Open-AdminEditor', 'PSEdit')

# List of all modules packaged with this module
# ModuleList = @()

# List of all files packaged with this module
FileList = @('Edit-Path.ps1', 'EditModule.psm1', 'ModuleMembers.ps1', 'Open-PSEdit.ps1', 'Repair-ModuleManifest.ps1')

# Private data to pass to the module specified in RootModule/ModuleToProcess
# PrivateData = @()

# HelpInfo URI of this module
# HelpInfoURI = @()

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''

}

