#!/usr/local/bin/pwsh
#Requires -version 3
# Update Module Manifest
# move/rename source psd1 file
# pass original properties from source manifest/data to New-ModuleManifest

function Repair-ModuleManifest {
  <#
      .SYNOPSIS
      Replaces module manifest (psd1) file with one generated by New-ModuleManifest
      .DESCRIPTION
      Preserves original properties from source manifest / data file, and passes the properties as variables to New-ModuleManifest
      .EXAMPLE
      Repair-ModuleManifest -Path .\Module\Patchy\Patchy.psd1
      .Link
      Edit-Module
  #>
  [CmdletBinding()]
    param(
        [Parameter(Position = 0)]
        [ValidateScript({Test-Path -Path $PSItem})]
        [string]
        $Path
    )
    
	$SupportedProperties = @('AliasesToExport', 'Author', 'ClrVersion', 'CmdletsToExport', 'CompanyName', 'DefaultCommandPrefix', 'Description', 'DotNetFrameworkVersion', 'FileList', 'FormatsToProcess', 'FunctionsToExport', 'Guid', 'HelpInfoUri', 'ModuleList', 'ModuleVersion', 'NestedModules', 'PowerShellHostVersion', 'PowerShellVersion', 'PrivateData', 'ProcessorArchitecture', 'RequiredAssemblies', 'RequiredModules', 'RootModule', 'ScriptsToProcess', 'TypesToProcess', 'VariablesToExport')

  try {
    $manifest = Test-ModuleManifest -Path $Path
  }
  catch {
    throw ('Failed to read properties from PowerShell Data file {0}' -f $Path)
  }

  # Before working with any manifest properties, which include relative paths, move current location to the root of the manifest / module
  Push-Location -Path (Split-Path -Path $Path -Parent) #-PassThru

    foreach ($property in $SupportedProperties) {
        Write-Verbose -Message ('Inspecting property {0}' -f $property)
        $ErrorActionPreference = 'Ignore'
        if ([bool]($manifest.$property)) {
            Write-Verbose -Message ('This property was {0}' -f $manifest.$property)
            if ($property -like '*List') {
                $NewPropString += (' -{0} @(' -f $property) + $(($manifest.$property | Resolve-Path -Relative) -join ',') + ')'
            } elseif ($($manifest.$property).Contains(' ')) {
                Write-Debug -Message 'Wrapping $property value with quote-marks'
                $NewPropString += (" -{0} '{1}'" -f $property, $manifest.$property)
            } else {
                $NewPropString += (' -{0} {1}' -f $property, $manifest.$property)
            }
        } else {
            Write-Verbose -Message ('Skipping unmatched / undefined {0}' -f $property)
        }
    }

  Write-Debug -Message ('$NewPropString : {0}' -f $NewPropString)
  $ErrorActionPreference = 'Stop'

  if ($NewPropString -notlike '*-RootModule*') {
    Write-Verbose -Message ('Defining RootModule property; {0}' -f $RootModule)
    Write-Debug -Message ('Defining RootModule property; {0}' -f $RootModule)
    $RootModule = (Split-Path -Path $Path -Leaf) -replace '.psd1', '.psm1'
    $NewPropString += (" -RootModule '{0}'" -f $RootModule)
  }

  if ($NewPropString -notlike '*-ModuleVersion*') {
    Write-Verbose -Message 'Defining new ModuleVersion'
    $NewPropString += ' -ModuleVersion 1.0.1'
  } else {
    Write-Verbose -Message 'Incrementing ModuleVersion'
    Write-Debug -Message (' -ModuleVersion {0}.{1}.{2}'-f [int]($manifest.Version.Major), [int]($manifest.Version.Minor), [int]($manifest.Version.Build+1))
    $NewPropString += ' -ModuleVersion {0}.{1}.{2}' -f [int]($manifest.Version.Major), [int]($manifest.Version.Minor), [int]($manifest.Version.Build+1)
  }
    
  Write-Debug   -Message $NewPropString

  Update-ModuleManifest -Path $Path $NewPropString
    
  Pop-Location
  <#
      New-ModuleManifest [-Path] <String>
      -AliasesToExport <String[]>
      -Author <String>
      -ClrVersion <Version>]
      -CmdletsToExport <String[]>
      -CompanyName <String>
      -Copyright <String>
      -DefaultCommandPrefix <String>
      -Description <String>
      -DotNetFrameworkVersion <Version>
      -FileList <String[]>
      -FormatsToProcess <String[]>
      -FunctionsToExport <String[]>
      -Guid <Guid>
      -HelpInfoUri <String>
      -ModuleList <Object[]>
      -ModuleVersion <Version>
      -NestedModules <Object[]>
      -PowerShellHostName <String>
      -PowerShellHostVersion <Version>
      -PowerShellVersion <Version>
      -PrivateData <Object>
      -ProcessorArchitecture <ProcessorArchitecture>
      -RequiredAssemblies <String[]>
      -RequiredModules <Object[]>
      -RootModule <String>
      -ScriptsToProcess <String[]>
      -TypesToProcess <String[]>
      -VariablesToExport <String[]>
  #>
}

# SIG # Begin signature block
# MIIHqgYJKoZIhvcNAQcCoIIHmzCCB5cCAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB
# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR
# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUFkZgpmkjlxqdKauQfNa12pSN
# MFegggTFMIIEwTCCA3WgAwIBAgIQKn06fomwQ6RKe8dq7JvZkjBBBgkqhkiG9w0B
# AQowNKAPMA0GCWCGSAFlAwQCAQUAoRwwGgYJKoZIhvcNAQEIMA0GCWCGSAFlAwQC
# AQUAogMCASAwgZgxCzAJBgNVBAYTAlVTMRAwDgYDVQQIDAdNb250YW5hMREwDwYD
# VQQHDAhNaXNzb3VsYTETMBEGA1UECgwKQnJ5YW4gRGFkeTEVMBMGA1UECwwMQ29k
# ZSBTaWduaW5nMRowGAYDVQQDDBFTZWN1cmUgUG93ZXJTaGVsbDEcMBoGCSqGSIb3
# DQEJARYNYnJ5YW5AZGFkeS51czAeFw0xODEyMzAwMzM5NDNaFw0xOTEyMzAwMzU5
# NDNaMIGYMQswCQYDVQQGEwJVUzEQMA4GA1UECAwHTW9udGFuYTERMA8GA1UEBwwI
# TWlzc291bGExEzARBgNVBAoMCkJyeWFuIERhZHkxFTATBgNVBAsMDENvZGUgU2ln
# bmluZzEaMBgGA1UEAwwRU2VjdXJlIFBvd2VyU2hlbGwxHDAaBgkqhkiG9w0BCQEW
# DWJyeWFuQGRhZHkudXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC3
# tawJQoBbR3HJe+GYdZMLf0jhbO7FM0SoX8509y1RR62TTFsgnK2Aqa1SbzTysBMS
# rL0+MI6ud44lC7/qCSTcCoqIpSMGtJ56QxJ3lLcRBe5Xb4xDLvzitpaGeKlugHfd
# QAAd1w0SetXT3D/AjnzW0/WrYZ6in3I9FzFF+JC24t4PGyQUaeE6UgCtEVyOdRGA
# gRr1Xhz9jomUVw84qof4LAAdfroR1z7VgY8j2Mq66HzsY63/y9iiBJSOeQ+OvBuz
# 6aaBoiiOflQ0HxbZYXuj5HSWeRPaFa/cM2Vp1iBJQ0K0ptaS6pAx2yOngWKhTGUY
# OPaFRxELdUICyBrSWFdlAgMBAAGjgZwwgZkwDgYDVR0PAQH/BAQDAgeAMFMGA1Ud
# EQRMMEqgHQYKKwYBBAGCNxQCA6APDA1icnlhbkBkYWR5LnVzgQ1icnlhbkBkYWR5
# LnVzggt3d3cuZGFkeS51c4INYnJ5YW4uZGFkeS51czATBgNVHSUEDDAKBggrBgEF
# BQcDAzAdBgNVHQ4EFgQUZUQGb3yr7zNZSgdlXQEmJ9SpdjIwQQYJKoZIhvcNAQEK
# MDSgDzANBglghkgBZQMEAgEFAKEcMBoGCSqGSIb3DQEBCDANBglghkgBZQMEAgEF
# AKIDAgEgA4IBAQCe91LHEw1CznKDFzRP4zzRf8DL/ffFgkOPjnb3e1JYiuTTobii
# HQtrTBRxnRh3t5nYQOkAdQZRW/VY2cUopMnVvBo1iJKkosPyVvP+QeZ/V9J9kJR0
# cYUpiMXmFKB6JMfGCfHG+cN3t57HDC2+yXD/tkvF0DwKrIXVz6MJIAq6ww9ZLs+d
# 7dUYo1T4I8F3J28X5YBiBPTQ0W2or2CWfnTNwxzQavdrRFoPBaZgXTrkdIjCuI9G
# 4Tnl1lNfz5qCshSBhOrwwYUkTuZv32hcYe1Yuj2exBfEF3gT5Cbgrp25v37dRDZ5
# qmIb6V9gpxBxUlJp2ApxyCvvGOejlh6BhtaxMYICTzCCAksCAQEwga0wgZgxCzAJ
# BgNVBAYTAlVTMRAwDgYDVQQIDAdNb250YW5hMREwDwYDVQQHDAhNaXNzb3VsYTET
# MBEGA1UECgwKQnJ5YW4gRGFkeTEVMBMGA1UECwwMQ29kZSBTaWduaW5nMRowGAYD
# VQQDDBFTZWN1cmUgUG93ZXJTaGVsbDEcMBoGCSqGSIb3DQEJARYNYnJ5YW5AZGFk
# eS51cwIQKn06fomwQ6RKe8dq7JvZkjAJBgUrDgMCGgUAoHgwGAYKKwYBBAGCNwIB
# DDEKMAigAoAAoQKAADAZBgkqhkiG9w0BCQMxDAYKKwYBBAGCNwIBBDAcBgorBgEE
# AYI3AgELMQ4wDAYKKwYBBAGCNwIBFTAjBgkqhkiG9w0BCQQxFgQU2sI8he8zUpUH
# wpIrAN4UsKg7VpkwDQYJKoZIhvcNAQEBBQAEggEAZUC/JWF3jAhERGKLFYILZd/Y
# y18xAGX07lbcbHXYMY+rLliANXx8r4Dr8nCcSrNHgUu62XB6vk0Qog1dcotk/Xop
# ZvrbLXNPNvfz7PngZttoLrD9wX2lVtQOAyybuoNYVM519pGiMsY9ANe3NRf0ceR7
# LNEay/GlrojIZ14w4lH+M7AIDPr31joafGMARMgijeqAmrU2H3cf1V8IZQcy/61B
# ZhLoHVMxjibp0ZsR+wm6ozHLsZxz6YxhesInb8uOhJ865zOq4EfKmZZeca4KRZoj
# XtlJYTZ7+nJRCR2mj/IgQpCIXzQRcCt8RQi9wplPBpiEOXPDoqhcG90klksh+g==
# SIG # End signature block
